gazebo_ros_control:
  pid_gains:
    right_steer_wheel_steering_joint: {p: 100.0, i: 0.01, d: 10.0}
    left_steer_wheel_steering_joint: {p: 100.0, i: 0.01, d: 10.0}

# The joint state controller handles publishing transforms for any moving joints
ackermann_joint_state_controller:
  type: "joint_state_controller/JointStateController"
  publish_rate: 50

ackermann_drive_controller:
  type: "ackermann_controller/AckermannController"
  publish_rate: 50


  spinning_joints: ['right_travel_wheel_rotate_joint',
                    'left_travel_wheel_rotate_joint',
                    'right_steer_wheel_rotate_joint',
                    'left_steer_wheel_rotate_joint']

  steering_joints: ['right_steer_wheel_steering_joint',
                    'left_steer_wheel_steering_joint']

  odometry_joints: ['right_travel_wheel_rotate_joint',
                    'left_travel_wheel_rotate_joint']

  wheelbase: 0.5

  # Odometry covariances for the encoder output of the robot. These values should
  # be tuned to your robot's sample odometry data, but these values are a good place
  # to start
  pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]

  # Top level frame (link) of the robot description
  base_frame_id: base_link

  # Velocity and acceleration limits for the robot
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 0.2   # m/s
      has_acceleration_limits: true
      max_acceleration       : 0.6   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 2.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 6.0   # rad/s^2
